---
!<experiment>
name: 'Simulate a Postgres downtime and check datadog monitors behaviour'
version: '1'
type: 'experiment'
description: "An unavailable PostgreSQL database might be too severe for suitable\
  \ fallbacks and requires your system to indicate unavailability appropriately."
inputs:
  - name: "environmentName"
    type: "string"
    required: true
  - name: "teamKey"
    type: "string"
    required: true
experiment:
  name: "Verify system unavailability status when PostgreSQL database can not be reached"
  team: "{{teamKey}}"
  hypothesis: "An unavailable PostgreSQL database might be too severe for suitable\
    \ fallbacks and requires your system to indicate unavailability appropriately.\
    \ What to verify : \
    \ - Your app is not having a crashloopbackoff because of the downtime of the database\
    \ - You respond with an error understandable for others\
    \ - You can notice this kind of event in your observability with a monitor (either a specific one or an error rate one)\
    \ - You can check and maybe tweak the value of your connection timeout\ "
  environment: "{{environmentName}}"
  lanes:
    - steps:
        - !<action>
          ignoreFailure: false
          parameters:
            url: "http://demo.steadybit.io/products"
            method: "GET"
            headers: []
            duration: "10s"
            statusCode: "200-299"
            readTimeout: "5s"
            successRate: 100
            maxConcurrent: 5
            connectTimeout: "5s"
            followRedirects: false
            requestsPerSecond: 10
          customLabel: "GIVEN: All HTTP requests are successful"
          actionType: "check:http"
          radius:
            maximum: 1
    - steps:
        - !<action>
          ignoreFailure: false
          parameters:
            cluster: "demo-prod"
            duration: "10s"
            podcount: "podCountEqualsDesiredCount"
            namespace: "steadybit-demo"
          customLabel: "GIVEN: All pods are ready"
          actionType: "check:kubernetes-pod-count"
          radius:
            maximum: 1
        - !<action>
          ignoreFailure: false
          parameters:
            port: "5432"
            duration: "60s"
          customLabel: "WHEN: PostgreSQL is not available"
          actionType: "container-network-blackhole-attack"
          radius:
            targetType: "container"
            predicate:
              operator: "AND"
              predicates:
                - key: "k8s.deployment"
                  operator: "EQUALS"
                  values:
                    - "steadybit-demo"
                - key: "k8s.container.name"
                  operator: "EQUALS"
                  values:
                    - "main"
                - key: "k8s.cluster-name"
                  operator: "EQUALS"
                  values:
                    - "demo-prod"
                - key: "k8s.namespace"
                  operator: "EQUALS"
                  values:
                    - "steadybit-demo"
              query: null
              percentage: 100
    - steps:
        - !<wait>
          ignoreFailure: false
          parameters:
            duration: "10s"
        - !<action>
          ignoreFailure: false
          parameters:
            url: "http://demo.steadybit.io/products"
            method: "GET"
            headers: []
            duration: "70s"
            statusCode: "503"
            readTimeout: "5s"
            successRate: 90
            maxConcurrent: 5
            connectTimeout: "5s"
            followRedirects: false
            requestsPerSecond: 10
          customLabel: "THEN: HTTP requests resolve to be Service unavailable"
          actionType: "check:http"
          radius:
            maximum: 1
        - !<wait>
          ignoreFailure: false
          parameters:
            duration: "20s"
        - !<action>
          ignoreFailure: false
          parameters:
            url: "http://demo.steadybit.io/products"
            method: "GET"
            headers: []
            duration: "10s"
            statusCode: "200-299"
            readTimeout: "5s"
            successRate: 100
            maxConcurrent: 5
            connectTimeout: "5s"
            followRedirects: false
            requestsPerSecond: 10
          customLabel: "THEN: All HTTP requests are successful again"
          actionType: "check:http"
          radius:
            maximum: 1
    - steps:
        - !<action>
          ignoreFailure: false
          parameters:
            duration: "10s"
          customLabel: "GIVEN: All Monitors are green"
          actionType: "com.github.steadybit.extension_datadog.monitor.status_check"
          radius:
            targetType: "com.github.steadybit.extension_datadog.monitor"
            predicate:
              operator: "AND"
              predicates:
                - key: "datadog.monitor.tags"
                  operator: "EQUALS"
                  values:
                    - "service:test"
            query: null
            percentage: 100
        - !<action>
          ignoreFailure: false
          parameters:
            duration: "70s"
          customLabel: "THEN: One or more Monitors alerts the outage consequences"
          actionType: "com.github.steadybit.extension_datadog.monitor.status_check"
          radius:
            targetType: "com.github.steadybit.extension_datadog.monitor"
            predicate:
              operator: "AND"
              predicates:
                - key: "datadog.monitor.tags"
                  operator: "EQUALS"
                  values:
                    - "service:test"
            query: null
            percentage: 100
        - !<wait>
          ignoreFailure: false
          parameters:
            duration: "20s"
        - !<action>
          ignoreFailure: false
          parameters:
            duration: "10s"
          customLabel: "THEN: All Monitors are green again after the resiliency mechanism\
        \ kicks in"
          actionType: "com.github.steadybit.extension_datadog.monitor.status_check"
          radius:
            targetType: "com.github.steadybit.extension_datadog.monitor"
            predicate:
              operator: "AND"
              predicates:
                - key: "datadog.monitor.tags"
                  operator: "EQUALS"
                  values:
                    - "service:test"
            query: null
            percentage: 100
